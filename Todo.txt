
________		CoordinateTests		________


 changeInX
whitepawn
(2,2).changeinX(1,2) : -1
(2,2).changeinX(3,2) : 1

blackpawn import gpv.util.*;
(7,2).changeinX(8,2) : -1
(7,2).changeinX(6,2) : 1
 
 
changeInY
whitepawn
(2,2).changeinX(2,3) : 1
(2,2).changeinX(2,1) : 1

blackpawn 
(7,2).changeinX(7,3) : 1
(7,2).changeinX(7,1) : 1


distanceToXY
horizontalMove:
	(1,1).distanceTo(1,2) : [0,1]
 	(1,8).distanceTo(1,7) : [0,-1]
 verticalMove:
 	(1,1).distanceTo(2,1) : [1,0]
 	(8,8).distanceTo(7,8) : [-1,0]
 diagonalMove:import gpv.util.*;
 	(1,1).distanceTo(2,2) : [1,1]
 	(8,8).distanceTo(7,7) : [-1,-1]
LMove 
	(1,1).distanceTo(3,2) : [2,1]
 	


________			ChessTests			________
canMove

PAWN:
		WHITE:
-		(2,2).canMove(4,2) : False
-		(2,2).canMove(3,2) : True
-		(2,2).canMove(1,2) : False
		BLACK:
-		(7,2).canMove(5,2) : False
-		(7,2).canMove(6,2) : True
-		(7,2).canMove(8,2) : False
	Initial move:
		WHITE:
-		(2,2).canMove(4,2) : True
		BLACK:
-		(7,2).canMove(5,2) : True
	Attack:
		WHITE:
-		(2,2).canMove(3,3) : True // with enemy piece
-		(2,2).canMove(3,1) : True // with enemy piece
-		(2,2).canMove(1,1) : False 
-		(2,2).canMove(3,3) : False // no enemy piece 
		
		BLACK:	
-		(7,2).canMove(6,3) : True // with enemy piece
-		(7,2).canMove(6,1) : True // with enemy piece
-		(7,2).canMove(8,1) : False 
-		(7,2).canMove(6,3) : False // no enemy piece 
		
		
		
		
KNIGHT:
		WHITE:
-		(1,2).canMove(3,3) : True
-		(4,3).canMove(2,4) : True
-		(1,2).canMove(2,4) : True
-		(1,2).canMove(2,3) : False // not an L
-		(1,2).canMove(2,4) : False // white piece at dest
		BLACK:
-		(8,2).canMove(6,1) : True
-		(4,6).canMove(6,5) : True
-		(8,2).canMove(7,4) : True
-		(8,2).canMove(7,3) : False // not an L
-		(8,2).canMove(7,4) : False // black piece at dest
		
BISHOP:
		WHITE:
-		(1,3).canMove(4,6) : True
-		(1,6).canMove(4,3) : True
-		(1,3).canMove(4,6) : True // white piece at dest
-		(1,6).canMove(4,3) : True // white piece at dest
-		(1,3).canMove(3,6) : False // invalid diagonal		
		BLACK:
-		(8,3).canMove(5,6) : True
-		(6,6).canMove(5,3) : True
-		(8,3).canMove(5,6) : False // black piece at dest
-		(6,6).canMove(5,3) : False // black piece at dest
		
ROOK:
		WHITE:
-		(1,8).canMove(8,8) : True
-		(8,5).canMove(3,5) : True
-		(1,8).canMove(8,8) : False // white piece at dest
-		(8,8).canMove(1,8) : False // white piece at dest
		BLACK:
-		(1,8).canMove(1,1) : True
-		(1,5).canMove(1,7) : True
-		(1,8).canMove(1,1) : False // black piece at dest
-		(1,1).canMove(1,8) : False // black piece at dest



QUEEN:
		WHITE:
-		(1,3).canMove(4,6) : True
-		(1,8).canMove(8,8) : True	
-		(7,7).canMove(7,6) : True	
		BLACK:
-		(8,3).canMove(5,6) : True
-		(1,8).canMove(1,1) : True
-		(2,2).canMove(3,2) : True
		
KING:
		WHITE:
-		(1,2).canMove(4,2) : False
-		(2,2).canMove(3,2) : True		
		BLACK:
-		(8,2).canMove(4,4) : False
-		(6,2).canMove(6,1) : True	

ROOK & KING:
		WHITE:
		(1,5).canMove(1,7) : True
		(1,5).canMove(1,3) : True
		(1,5).canMove(1,3) : False // rook at position but not first move
		(1,5).canMove(1,3) : False // no rook at position
		(1,5).canMove(1,7) : False // not first move
		
		BLACK:
		
		(8,5).canMove(8,7) : True
		(8,5).canMove(8,3) : True
		(8,5).canMove(8,3) : False // rook at position but not first move
		(8,5).canMove(8,3) : False // no rook at position
		(8,5).canMove(8,7) : False // not first move
		